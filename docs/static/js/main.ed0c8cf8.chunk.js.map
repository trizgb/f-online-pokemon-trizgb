{"version":3,"sources":["components/Filter.js","components/PokeList.js","App.js","services/PokemonService.js","serviceWorker.js","index.js"],"names":["Filter","actionFilter","this","props","react_default","a","createElement","className","htmlFor","type","placeholder","onKeyUp","Component","PokeList","filterPokemonR","map","item","index","key","src","image","alt","name","id","i","k","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pokemon","pokeSearch","searchPokemon","bind","assertThisInitialized","getPokemons","_this2","pokemonDataUrl","fetch","then","response","json","data","results","urlPokemon","url","requestUrl","push","getInfoPokemon","_this3","pokemonInfo","types","pokeTypes","pokeJson","sprites","front_default","setState","sort","b","e","query","currentTarget","value","_this4","filter","toLocaleUpperCase","includes","filterPokemonResults","filterPokemon","components_Filter","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed0c8cf8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Filter extends Component {\n\n  render() {\n    const { actionFilter } = this.props;\n\n    return (\n      <div className=\"app__field\">\n        <label className=\"app__field-text\" htmlFor=\"search\"></label>\n        <input type=\"text\" className=\"app__field-search\" placeholder=\"Filter pokemons by name\" onKeyUp={actionFilter} />\n      </div>\n    )\n  }\n}\n\nFilter.propTypes = {\n  actionFilter: PropTypes.func.isRequired\n}\n\nexport default Filter;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass PokeList extends Component {\n  render() {\n    const { filterPokemonR } = this.props;\n    return (\n      <ul className=\"pokemons__list\">\n        {filterPokemonR.map((item, index) => {\n          return (\n            <li className=\"pokemons__list-pokemon\" key={index}>\n              <div className=\"pokemon__wrapper\">\n                <div className=\"image__container\">\n                  <img className=\"pokemon__image\" src={item.image} alt={item.name}></img>\n                </div>\n                <div className=\"info__container\">\n                  <div className=\"pokemon__id\">ID / {item.id}</div>\n                  <h2 className=\"pokemon__name\">{item.name}</h2>\n                  <ul className=\"pokemon__types\">{item.type.map((i, k) => { return <li className=\"pokemon__types-item\" key={k}>{i}</li> })}</ul>\n                </div>\n              </div>\n            </li>\n          )\n        })}\n      </ul>\n    )\n  }\n}\n\nPokeList.propTypes = {\n  filterPokemonR: PropTypes.arrayOf(PropTypes.object)\n}\n\nexport default PokeList;","import React, { Component } from 'react';\nimport { requestPokemons } from './services/PokemonService';\nimport Filter from './components/Filter';\nimport PokeList from './components/PokeList';\nimport './App.scss';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      pokemon: [],\n      pokeSearch: ''\n    };\n\n    this.searchPokemon = this.searchPokemon.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPokemons();\n\n  }\n\n  getPokemons() {\n    let pokemonDataUrl = [];\n\n    requestPokemons()\n      .then(data => {\n        data.results.map(item => {\n          let urlPokemon = item.url;\n\n          let requestUrl = fetch(urlPokemon).then(response => response.json());\n          requestUrl.then(data => {\n            pokemonDataUrl.push(data);\n            this.getInfoPokemon(pokemonDataUrl);\n          });\n          return requestUrl;\n        });\n      });\n  }\n\n  getInfoPokemon(data) {\n    let pokemonInfo = [];\n\n    data.map(item => {\n      let types = [];\n      item.types.map(pokeTypes => {\n        return types.push(pokeTypes.type.name);\n      })\n\n      let pokeJson = {\n        'id': item.id,\n        'name': item.name,\n        'type': types,\n        'image': item.sprites.front_default\n      }\n\n      pokemonInfo.push(pokeJson);\n      this.setState({\n        pokemon: pokemonInfo.sort(((a, b) => a.id - b.id))\n      });\n\n      return pokemonInfo;\n\n    });\n  }\n\n  searchPokemon(e) {\n    const query = e.currentTarget.value;\n\n    this.setState({\n      pokeSearch: query\n    })\n  }\n\n  filterPokemon() {\n    const filteredResults = this.state.pokemon.filter(item => {\n      const name = item.name;\n\n      return (name.toLocaleUpperCase().includes(this.state.pokeSearch.toLocaleUpperCase()))\n    })\n    return filteredResults;\n  }\n\n\n  render() {\n    const filterPokemonResults = this.filterPokemon();\n\n    return (\n      <div className=\"app\">\n        <header className=\"app__header\">\n          <h1 className=\"app__header-title\">pokedex</h1>\n          <Filter actionFilter={this.searchPokemon} />\n          <div className=\"triangle t-left\"></div>\n          <div className=\"triangle t-right\"></div>\n        </header>\n        <main className=\"app__main\">\n          <PokeList filterPokemonR={filterPokemonResults} />\n        </main>\n        <footer className=\"app__footer\">\n          <p className=\"app__footer-text\">Beatriz Gomez | Â© Adalab 2019</p>\n          <div className=\"circle c-left\"></div>\n          <div className=\"circle c-right\"></div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const ENDPOINT = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=25';\n\nconst requestPokemons = () => fetch(ENDPOINT).then(response => response.json());\n\nexport { requestPokemons };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}